{
  "openapi": "3.1.0",
  "info": {
    "title": "Business Entity and Device Management API",
    "version": "1.0.0",
    "description": "API for managing business entities, devices, organizations, and users with a single source of truth in the new database system. The new database is the master data source, with CDC mechanism translating data to the old database system."
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://api-sandbox.example.com/v1",
      "description": "Sandbox server"
    }
  ],
  "components": {
    "schemas": {
      "Organization": {
        "type": "object",
        "required": ["id", "title"],
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "parent_id": { "type": "integer", "format": "int64", "nullable": true },
          "title": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "User": {
        "type": "object",
        "required": ["id", "org_id", "name"],
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "org_id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "Entity": {
        "type": "object",
        "required": ["id", "type_id", "label"],
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "type_id": { "type": "integer", "format": "int64" },
          "label": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "EntityType": {
        "type": "object",
        "required": ["id", "category", "label", "settings"],
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "category": { 
            "type": "string",
            "enum": ["business", "geo"]
          },
          "label": { "type": "string" },
          "settings": { "type": "object" }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": { "type": "string" },
          "message": { "type": "string" },
          "correlation_id": { "type": "string", "format": "uuid" },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["parameter", "code", "message"],
              "properties": {
                "parameter": { "type": "string" },
                "code": { "type": "string" },
                "message": { "type": "string" }
              }
            }
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "required": ["data", "has_more"],
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GenericItem" }
          },
          "has_more": { "type": "boolean" }
        }
      },
      "GenericItem": {
        "type": "object",
        "description": "This is a placeholder for various resource types. It will be replaced with actual types in specific endpoints."
      },
      "IdResponse": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": { "type": "integer", "format": "int64" }
        }
      }
    },
    "parameters": {
      "IdParam": {
        "name": "id",
        "in": "query",
        "required": true,
        "schema": { "type": "integer", "format": "int64" }
      },
      "PaginationLimit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return (default: 100, max: 1000)",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100,
          "minimum": 1,
          "maximum": 1000
        }
      },
      "PaginationOffset": {
        "name": "offset",
        "in": "query",
        "description": "The index of the first item to return (default: 0)",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 0,
          "minimum": 0
        }
      },
      "SearchQuery": {
        "name": "q",
        "in": "query",
        "description": "A search query string",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "SortParam": {
        "name": "sort",
        "in": "query",
        "description": "Sort expression. Supports one or more fields, optionally prefixed with - to indicate descending order. For example, title,-created_at",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.example.com/oauth/authorize",
            "tokenUrl": "https://auth.example.com/oauth/token",
            "scopes": {
              "read": "Read access to protected resources",
              "write": "Write access to protected resources"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://auth.example.com/oauth/token",
            "scopes": {
              "read": "Read access to protected resources",
              "write": "Write access to protected resources"
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request was invalid",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "invalid_argument",
              "message": "One or more parameters are invalid.",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab",
              "errors": [
                {
                  "parameter": "email",
                  "code": "invalid_format",
                  "message": "The email address format is invalid."
                }
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource was not found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "not_found",
              "message": "Resource not found",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication is required",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "unauthorized",
              "message": "Authentication required",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab"
            }
          }
        }
      },
      "Forbidden": {
        "description": "The user does not have necessary permissions",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "forbidden",
              "message": "Insufficient permissions",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab"
            }
          }
        }
      },
      "NoContent": {
        "description": "The request was successful, but there is no content to return"
      }
    }
  },
  "security": [
    {
      "OAuth2": ["read", "write"]
    }
  ],
  "paths": {
    "/org/create": {
      "post": {
        "summary": "Create a new organization",
        "description": "Creates an organization for a dealer",
        "operationId": "createOrganization",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "parent_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the parent organization"
                  },
                  "title": {
                    "type": "string",
                    "description": "The organization's title"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/org/read": {
      "get": {
        "summary": "Get organization by ID",
        "description": "Returns an organization's data by ID",
        "operationId": "getOrganization",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                },
                "example": {
                  "id": 123,
                  "parent_id": 12,
                  "title": "Solutions Inc.",
                  "created_at": "2025-06-30T06:46:10Z"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "Get organization by ID",
        "description": "Returns an organization's data by ID",
        "operationId": "getOrganizationPost",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the organization"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                },
                "example": {
                  "id": 123,
                  "parent_id": 12,
                  "title": "Solutions Inc.",
                  "created_at": "2025-06-30T06:46:10Z"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/org/update": {
      "post": {
        "summary": "Update an existing organization",
        "description": "Updates the information of an existing organization",
        "operationId": "updateOrganization",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "title"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the organization"
                  },
                  "parent_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the parent organization"
                  },
                  "title": {
                    "type": "string",
                    "description": "The organization's title"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/org/delete": {
      "post": {
        "summary": "Delete an organization",
        "description": "Deletes an organization",
        "operationId": "deleteOrganization",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the organization"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/org/list": {
      "get": {
        "summary": "List organizations",
        "description": "Returns all organizations from a dealer",
        "operationId": "listOrganizations",
        "tags": ["Organizations"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Organization" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "parent_id": 12,
                      "title": "Solutions Inc.",
                      "created_at": "2025-06-30T06:46:10Z"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List organizations with advanced filtering",
        "description": "Returns all organizations from a dealer with filtering options",
        "operationId": "listOrganizationsAdvanced",
        "tags": ["Organizations"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0
                  },
                  "sort": {
                    "type": "string"
                  },
                  "q": {
                    "type": "string"
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["eq", "neq", "lt", "lte", "gt", "gte", "in", "contains", "between"]
                            },
                            "field": { "type": "string" },
                            "value": {}
                          },
                          "required": ["type", "field", "value"]
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["and", "or"]
                            },
                            "conditions": {
                              "type": "array",
                              "items": {}
                            }
                          },
                          "required": ["type", "conditions"]
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["not"]
                            },
                            "condition": {
                              "type": "object"
                            }
                          },
                          "required": ["type", "condition"]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Organization" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "parent_id": 12,
                      "title": "Solutions Inc.",
                      "created_at": "2025-06-30T06:46:10Z"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/user/create": {
      "post": {
        "summary": "Create a new user",
        "description": "Creates a user in your organization",
        "operationId": "createUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The user's full name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/user/read": {
      "get": {
        "summary": "Get user by ID",
        "description": "Returns a user's data by ID",
        "operationId": "getUser",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": 123,
                  "org_id": 21,
                  "name": "Jane Doe",
                  "created_at": "2025-06-30T06:46:10Z"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "Get user by ID",
        "description": "Returns a user's data by ID",
        "operationId": "getUserPost",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": 123,
                  "org_id": 21,
                  "name": "Jane Doe",
                  "created_at": "2025-06-30T06:46:10Z"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/user/update": {
      "post": {
        "summary": "Update an existing user",
        "description": "Updates the information of an existing user",
        "operationId": "updateUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "name"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the user"
                  },
                  "name": {
                    "type": "string",
                    "description": "The user's full name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/user/delete": {
      "post": {
        "summary": "Delete a user",
        "description": "Deletes a user",
        "operationId": "deleteUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/user/list": {
      "get": {
        "summary": "List users",
        "description": "Returns all users from an organization",
        "operationId": "listUsers",
        "tags": ["Users"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/User" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "org_id": 21,
                      "name": "Jane Doe",
                      "created_at": "2025-06-30T06:46:10Z"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List users with advanced filtering",
        "description": "Returns all users from an organization with filtering options",
        "operationId": "listUsersAdvanced",
        "tags": ["Users"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0
                  },
                  "sort": {
                    "type": "string"
                  },
                  "q": {
                    "type": "string"
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "type": {
                              "type": "string", 
                              "enum": ["eq", "neq", "lt", "lte", "gt", "gte", "in", "contains", "between"]
                            },
                            "field": { "type": "string" },
                            "value": {}
                          },
                          "required": ["type", "field", "value"]
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["and", "or"]
                            },
                            "conditions": {
                              "type": "array",
                              "items": {}
                            }
                          },
                          "required": ["type", "conditions"]
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["not"]
                            },
                            "condition": {
                              "type": "object"
                            }
                          },
                          "required": ["type", "condition"]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/User" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "org_id": 21,
                      "name": "Jane Doe",
                      "created_at": "2025-06-30T06:46:10Z"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    }
  }
}
