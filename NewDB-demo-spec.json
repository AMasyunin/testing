{
  "openapi": "3.1.0",
  "info": {
    "title": "Business Entity and Device Management API",
    "version": "1.0.0",
    "description": "API for managing business entities, devices, organizations, and users with a single source of truth in the new database system."
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://api-sandbox.example.com/v1",
      "description": "Sandbox server"
    }
  ],
  "components": {
    "schemas": {
      "Organization": {
        "type": "object",
        "required": ["id", "title"],
        "properties": {
          "id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the organization"
          },
          "parent_id": { 
            "type": "integer", 
            "format": "int64", 
            "nullable": true,
            "description": "Unique identifier for the parent organization. Used to build a hierarchy of organizations"
          },
          "title": { 
            "type": "string",
            "description": "The organization's title"
          },
          "created_at": { 
            "type": "string", 
            "format": "date-time",
            "description": "Date and time at which the object was created"
          },
          "phone": {
            "type": "string",
            "description": "The organization's phone number"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The organization's primary email"
          }
        }
      },
      "User": {
        "type": "object",
        "required": ["id", "org_id", "name", "email", "phone"],
        "properties": {
          "id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the user"
          },
          "org_id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the user's organization"
          },
          "name": { 
            "type": "string",
            "description": "The user's full name"
          },
          "created_at": { 
            "type": "string", 
            "format": "date-time",
            "description": "Date and time at which the user was created"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email"
          },
          "phone": {
            "type": "string",
            "description": "The user's phone number"
          },
          "settings": {
            "type": "object",
            "description": "User settings",
            "properties": {
              "time_zone": {
                "type": "string",
                "description": "ISO timezone ID"
              },
              "locale": {
                "type": "string",
                "description": "Locale code"
              }
            }
          }
        }
      },
      "Entity": {
        "type": "object",
        "required": ["id", "type_id", "label"],
        "properties": {
          "id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the entity"
          },
          "type_id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the entity's type"
          },
          "label": { 
            "type": "string",
            "description": "The entity's title/name"
          },
          "created_at": { 
            "type": "string", 
            "format": "date-time",
            "description": "Date and time at which the entity was created"
          },
          "fields": {
            "type": "object",
            "description": "A map, each key of which is a custom field ID as a string",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The field type"
                },
                "value": {
                  "description": "The field value"
                }
              }
            }
          }
        }
      },
      "EntityType": {
        "type": "object",
        "required": ["id", "category", "label", "settings"],
        "properties": {
          "id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the entity type"
          },
          "category": { 
            "type": "string",
            "enum": ["business", "geo"],
            "description": "The category of entity type"
          },
          "label": { 
            "type": "string",
            "description": "The entity type label"
          },
          "settings": { 
            "type": "object",
            "description": "Describes the layout of sections and fields for the entity type",
            "properties": {
              "layout": {
                "type": "object",
                "properties": {
                  "sections": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "Section label"
                        },
                        "field_order": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Order of fields in the section"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Inventory": {
        "type": "object",
        "required": ["id", "label"],
        "properties": {
          "id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the inventory"
          },
          "label": { 
            "type": "string",
            "description": "The inventory's label"
          },
          "description": { 
            "type": "string",
            "description": "The inventory's description"
          },
          "created_at": { 
            "type": "string", 
            "format": "date-time",
            "description": "Date and time at which the inventory was created"
          }
        }
      },
      "InventoryItem": {
        "type": "object",
        "required": ["id", "inventory_id", "entity_id"],
        "properties": {
          "id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the inventory item"
          },
          "inventory_id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the inventory"
          },
          "entity_id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the entity"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": { 
            "type": "string",
            "description": "Error code identifier"
          },
          "message": { 
            "type": "string",
            "description": "Human-readable error message"
          },
          "correlation_id": { 
            "type": "string", 
            "format": "uuid",
            "description": "Unique identifier for correlating the error with server logs"
          },
          "errors": {
            "type": "array",
            "description": "Detailed error information for specific parameters",
            "items": {
              "type": "object",
              "required": ["parameter", "code", "message"],
              "properties": {
                "parameter": { 
                  "type": "string",
                  "description": "The parameter that caused the error"
                },
                "code": { 
                  "type": "string",
                  "description": "Error code specific to this parameter"
                },
                "message": { 
                  "type": "string",
                  "description": "Human-readable error message for this parameter"
                }
              }
            }
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "required": ["data", "has_more"],
        "properties": {
          "data": {
            "type": "array",
            "description": "A list of items returned for the current page, based on the provided pagination and filter parameters",
            "items": { "$ref": "#/components/schemas/GenericItem" }
          },
          "has_more": { 
            "type": "boolean",
            "description": "Indicates whether more items are available beyond the current page. When false, the current result set is the final one"
          }
        }
      },
      "GenericItem": {
        "type": "object",
        "description": "This is a placeholder for various resource types. It will be replaced with actual types in specific endpoints."
      },
      "IdResponse": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": { 
            "type": "integer", 
            "format": "int64",
            "description": "Unique identifier for the created resource"
          }
        }
      },
      "FilterCondition": {
        "type": "object",
        "description": "A filter condition for advanced querying",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["eq", "neq", "lt", "lte", "gt", "gte", "in", "contains", "between"],
                "description": "The type of comparison operation"
              },
              "field": { 
                "type": "string",
                "description": "The field to apply the condition to"
              },
              "value": {
                "description": "The value to compare against"
              }
            },
            "required": ["type", "field", "value"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["and", "or"],
                "description": "Logical operator for combining conditions"
              },
              "conditions": {
                "type": "array",
                "description": "List of conditions to combine",
                "items": {
                  "$ref": "#/components/schemas/FilterCondition"
                }
              }
            },
            "required": ["type", "conditions"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["not"],
                "description": "Negation operator"
              },
              "condition": {
                "$ref": "#/components/schemas/FilterCondition",
                "description": "Condition to negate"
              }
            },
            "required": ["type", "condition"]
          }
        ]
      }
    },
    "parameters": {
      "IdParam": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Unique identifier for the resource",
        "schema": { 
          "type": "integer", 
          "format": "int64" 
        }
      },
      "PaginationLimit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return (default: 100, max: 1000)",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100,
          "minimum": 1,
          "maximum": 1000
        }
      },
      "PaginationOffset": {
        "name": "offset",
        "in": "query",
        "description": "The index of the first item to return (default: 0)",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 0,
          "minimum": 0
        }
      },
      "SearchQuery": {
        "name": "q",
        "in": "query",
        "description": "A search query string",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "SortParam": {
        "name": "sort",
        "in": "query",
        "description": "Sort expression. Supports one or more fields, optionally prefixed with - to indicate descending order. For example, title,-created_at",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.example.com/oauth/authorize",
            "tokenUrl": "https://auth.example.com/oauth/token",
            "scopes": {
              "read": "Read access to protected resources",
              "write": "Write access to protected resources"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://auth.example.com/oauth/token",
            "scopes": {
              "read": "Read access to protected resources",
              "write": "Write access to protected resources"
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request was invalid",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "invalid_argument",
              "message": "One or more parameters are invalid.",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab",
              "errors": [
                {
                  "parameter": "email",
                  "code": "invalid_format",
                  "message": "The email address format is invalid."
                }
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource was not found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "not_found",
              "message": "Resource not found",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication is required",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "unauthorized",
              "message": "Authentication required",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab"
            }
          }
        }
      },
      "Forbidden": {
        "description": "The user does not have necessary permissions",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "forbidden",
              "message": "Insufficient permissions",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab"
            }
          }
        }
      },
      "Conflict": {
        "description": "The request conflicts with current state of the server",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "example": {
              "code": "conflict",
              "message": "Resource already exists or cannot be modified in its current state",
              "correlation_id": "1a2b3c4d-5678-90ab-cdef-1234567890ab"
            }
          }
        }
      },
      "NoContent": {
        "description": "The request was successful, but there is no content to return"
      }
    }
  },
  "security": [
    {
      "OAuth2": ["read", "write"]
    }
  ],
  "paths": {
  "/org/create": {
      "post": {
        "summary": "Create a new organization",
        "description": "Adds an organization to your dealer",
        "operationId": "createOrganization",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "phone", "email"],
                "properties": {
                  "parent_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the parent organization. Used to build a hierarchy of organizations"
                  },
                  "title": {
                    "type": "string",
                    "description": "The organization's title"
                  },
                  "phone": {
                    "type": "string",
                    "description": "The organization's phone number"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The organization's primary email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": { "$ref": "#/components/responses/Conflict" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/org/read": {
      "get": {
        "summary": "Get organization by ID",
        "description": "Returns an organization's data by ID",
        "operationId": "getOrganization",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                },
                "example": {
                  "id": 123,
                  "parent_id": 12,
                  "title": "Solutions Inc.",
                  "created_at": "2025-06-30T06:46:10Z",
                  "phone": "+1 (555) 123-4567",
                  "email": "contact@solutionsinc.com"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "Get organization by ID",
        "description": "Returns an organization's data by ID",
        "operationId": "getOrganizationPost",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the organization"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                },
                "example": {
                  "id": 123,
                  "parent_id": 12,
                  "title": "Solutions Inc.",
                  "created_at": "2025-06-30T06:46:10Z",
                  "phone": "+1 (555) 123-4567",
                  "email": "contact@solutionsinc.com"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/org/update": {
      "post": {
        "summary": "Update an existing organization",
        "description": "Updates the information of an existing organization",
        "operationId": "updateOrganization",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "title", "phone", "email"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the organization"
                  },
                  "parent_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the parent organization"
                  },
                  "title": {
                    "type": "string",
                    "description": "The organization's title"
                  },
                  "phone": {
                    "type": "string",
                    "description": "The organization's phone number"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The organization's primary email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/org/list": {
      "get": {
        "summary": "List organizations",
        "description": "Returns all organizations from a dealer",
        "operationId": "listOrganizations",
        "tags": ["Organizations"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Organization" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "parent_id": 12,
                      "title": "Solutions Inc.",
                      "created_at": "2025-06-30T06:46:10Z",
                      "phone": "+1 (555) 123-4567",
                      "email": "contact@solutionsinc.com"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List organizations with advanced filtering",
        "description": "Returns all organizations from a dealer with advanced filtering options",
        "operationId": "listOrganizationsAdvanced",
        "tags": ["Organizations"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000,
                    "description": "Maximum number of items to return"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "description": "The index of the first item to return"
                  },
                  "sort": {
                    "type": "string",
                    "description": "Sort expression (e.g., 'title,-created_at')"
                  },
                  "q": {
                    "type": "string",
                    "description": "A search query string"
                  },
                  "conditions": {
                    "type": "array",
                    "description": "Advanced filtering conditions",
                    "items": {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Organization" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "parent_id": 12,
                      "title": "Solutions Inc.",
                      "created_at": "2025-06-30T06:46:10Z",
                      "phone": "+1 (555) 123-4567",
                      "email": "contact@solutionsinc.com"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/org/delete": {
      "post": {
        "summary": "Delete an organization",
        "description": "Marks an organization as deleted without permanently removing it from the system. This soft delete approach allows recovery of the organization's data upon request to support.",
        "operationId": "deleteOrganization",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the organization"
                  },
                  "org_confirmation": {
                    "type": "string",
                    "description": "The exact name of the organization must be manually provided to confirm critical operations. This field is required only when using the OAuth2 Authorization Code Flow."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/user/create": {
      "post": {
        "summary": "Create a new user",
        "description": "Adds a user to your organization",
        "operationId": "createUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "phone", "email", "settings"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The user's full name"
                  },
                  "phone": {
                    "type": "string",
                    "description": "The user's phone number"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email"
                  },
                  "settings": {
                    "type": "object",
                    "description": "User settings",
                    "properties": {
                      "time_zone": {
                        "type": "string",
                        "description": "ISO timezone ID"
                      },
                      "locale": {
                        "type": "string",
                        "description": "Locale code"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/user/update": {
      "post": {
        "summary": "Update an existing user",
        "description": "Updates the information of an existing user",
        "operationId": "updateUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "name", "phone", "email", "settings"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the user"
                  },
                  "name": {
                    "type": "string",
                    "description": "The user's full name"
                  },
                  "phone": {
                    "type": "string",
                    "description": "The user's phone number"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email"
                  },
                  "settings": {
                    "type": "object",
                    "description": "User settings",
                    "properties": {
                      "time_zone": {
                        "type": "string",
                        "description": "ISO timezone ID"
                      },
                      "locale": {
                        "type": "string",
                        "description": "Locale code"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/user/read": {
      "get": {
        "summary": "Get user by ID",
        "description": "Returns a user's data by ID",
        "operationId": "getUser",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": 123,
                  "org_id": 21,
                  "name": "Jane Doe",
                  "created_at": "2025-06-30T06:46:10Z",
                  "email": "jane.doe.amsterdam@example.com",
                  "phone": "+31 6 12345678",
                  "settings": {
                    "time_zone": "Europe/Amsterdam",
                    "locale": "nl_NL"
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },	
"/user/list": {
      "get": {
        "summary": "List users",
        "description": "Returns all users from an organization",
        "operationId": "listUsers",
        "tags": ["Users"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/User" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "org_id": 21,
                      "name": "Jane Doe",
                      "created_at": "2025-06-30T06:46:10Z",
                      "email": "jane.doe.amsterdam@example.com",
                      "phone": "+31 6 12345678",
                      "settings": {
                        "time_zone": "Europe/Amsterdam",
                        "locale": "nl_NL"
                      }
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List users with advanced filtering",
        "description": "Returns all users from an organization with advanced filtering options",
        "operationId": "listUsersAdvanced",
        "tags": ["Users"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000,
                    "description": "Maximum number of items to return"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "description": "The index of the first item to return"
                  },
                  "sort": {
                    "type": "string",
                    "description": "Sort expression (e.g., 'name,-created_at')"
                  },
                  "q": {
                    "type": "string",
                    "description": "A search query string"
                  },
                  "conditions": {
                    "type": "array",
                    "description": "Advanced filtering conditions",
                    "items": {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/User" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "org_id": 21,
                      "name": "Jane Doe",
                      "created_at": "2025-06-30T06:46:10Z",
                      "email": "jane.doe.amsterdam@example.com",
                      "phone": "+31 6 12345678",
                      "settings": {
                        "time_zone": "Europe/Amsterdam",
                        "locale": "nl_NL"
                      }
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/user/delete": {
      "post": {
        "summary": "Delete a user",
        "description": "Marks a user as deleted without immediately removing their data from the system. This soft delete ensures that the user account is deactivated while allowing time for recovery, if necessary. To follow GDPR rules, personal data will be anonymized after 30 days.",
        "operationId": "deleteUser",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/entity_type/create": {
      "post": {
        "summary": "Create a new entity type",
        "description": "Adds new entity type",
        "operationId": "createEntityType",
        "tags": ["Entity Types"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["category", "label", "settings"],
                "properties": {
                  "category": {
                    "type": "string",
                    "enum": ["business", "geo"],
                    "description": "The category of entity type"
                  },
                  "label": {
                    "type": "string",
                    "description": "The entity type label"
                  },
                  "settings": {
                    "type": "object",
                    "description": "Describes the layout of sections and fields for the entity type"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Entity type created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/entity_type/update": {
      "post": {
        "summary": "Update an entity type",
        "description": "Updates the entity type",
        "operationId": "updateEntityType",
        "tags": ["Entity Types"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "category", "label", "settings"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity type"
                  },
                  "category": {
                    "type": "string",
                    "enum": ["business", "geo"],
                    "description": "The category of entity type"
                  },
                  "label": {
                    "type": "string",
                    "description": "The entity type label"
                  },
                  "settings": {
                    "type": "object",
                    "description": "Describes the layout of sections and fields for the entity type"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/entity_type/read": {
      "get": {
        "summary": "Get entity type by ID",
        "description": "Returns an entity type by ID",
        "operationId": "getEntityType",
        "tags": ["Entity Types"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the entity type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity type details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityType"
                },
                "example": {
                  "id": 12,
                  "category": "business",
                  "label": "Boats",
                  "settings": {
                    "layout": {
                      "sections": [
                        {
                          "label": "Section label",
                          "field_order": ["label", "location", "131212", "tags", "description"]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/entity_type/list": {
      "get": {
        "summary": "List entity types",
        "description": "Returns all entity types from an organization",
        "operationId": "listEntityTypes",
        "tags": ["Entity Types"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of entity types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/EntityType" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 12,
                      "category": "business",
                      "label": "Boats",
                      "settings": {
                        "layout": {
                          "sections": [
                            {
                              "label": "Section label",
                              "field_order": ["label", "location", "131212", "tags", "description"]
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List entity types with advanced filtering",
        "description": "Returns all entity types from an organization with advanced filtering options",
        "operationId": "listEntityTypesAdvanced",
        "tags": ["Entity Types"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000,
                    "description": "Maximum number of items to return"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "description": "The index of the first item to return"
                  },
                  "sort": {
                    "type": "string",
                    "description": "Sort expression (e.g., 'label,-created_at')"
                  },
                  "q": {
                    "type": "string",
                    "description": "A search query string"
                  },
                  "conditions": {
                    "type": "array",
                    "description": "Advanced filtering conditions",
                    "items": {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of entity types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/EntityType" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 12,
                      "category": "business",
                      "label": "Boats",
                      "settings": {
                        "layout": {
                          "sections": [
                            {
                              "label": "Section label",
                              "field_order": ["label", "location", "131212", "tags", "description"]
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/entity_type/delete": {
      "post": {
        "summary": "Delete an entity type",
        "description": "Deletes the specified entity type by its ID",
        "operationId": "deleteEntityType",
        "tags": ["Entity Types"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity type"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "If set to true, allows deletion of the entity type even if entities of this type still exist. If false or omitted, the operation will fail if any entities of this type are present."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "409": { "$ref": "#/components/responses/Conflict" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/entity/create": {
      "post": {
        "summary": "Create a new entity",
        "description": "Adds an entity for the organization",
        "operationId": "createEntity",
        "tags": ["Entities"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["type_id", "label"],
                "properties": {
                  "type_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity's type"
                  },
                  "label": {
                    "type": "string",
                    "description": "The entity's title/name"
                  },
                  "fields": {
                    "type": "object",
                    "description": "Other fields configured for the type",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The field type"
                        },
                        "value": {
                          "description": "The field value"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Entity created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
"/entity/update": {
      "post": {
        "summary": "Update an existing entity",
        "description": "Updates the information of an existing entity",
        "operationId": "updateEntity",
        "tags": ["Entities"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "type_id", "label"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity"
                  },
                  "type_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity's type"
                  },
                  "label": {
                    "type": "string",
                    "description": "The entity's title/name"
                  },
                  "fields": {
                    "type": "object",
                    "description": "Other fields configured for the type",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The field type"
                        },
                        "value": {
                          "description": "The field value"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/entity/read": {
      "get": {
        "summary": "Get entity by ID",
        "description": "Returns an entity's data by ID",
        "operationId": "getEntity",
        "tags": ["Entities"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                },
                "example": {
                  "id": 123,
                  "type_id": 21,
                  "label": "Aspen V6 GTX",
                  "created_at": "2025-06-30T06:46:10Z",
                  "fields": {
                    "131312": {
                      "type": "text",
                      "value": "I love text!"
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/entity/list": {
      "get": {
        "summary": "List entities",
        "description": "Returns all entities available to the organization",
        "operationId": "listEntities",
        "tags": ["Entities"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Entity" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "type_id": 21,
                      "label": "Aspen V6 GTX",
                      "created_at": "2025-06-30T06:46:10Z",
                      "fields": {
                        "131312": {
                          "type": "text",
                          "value": "I love text!"
                        }
                      }
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List entities with advanced filtering",
        "description": "Returns all entities available to the organization with advanced filtering options",
        "operationId": "listEntitiesAdvanced",
        "tags": ["Entities"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000,
                    "description": "Maximum number of items to return"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "description": "The index of the first item to return"
                  },
                  "sort": {
                    "type": "string",
                    "description": "Sort expression (e.g., 'label,-created_at')"
                  },
                  "q": {
                    "type": "string",
                    "description": "A search query string"
                  },
                  "conditions": {
                    "type": "array",
                    "description": "Advanced filtering conditions",
                    "items": {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Entity" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "type_id": 21,
                      "label": "Aspen V6 GTX",
                      "created_at": "2025-06-30T06:46:10Z",
                      "fields": {
                        "131312": {
                          "type": "text",
                          "value": "I love text!"
                        }
                      }
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/entity/delete": {
      "post": {
        "summary": "Delete an entity",
        "description": "Deletes the specified entity by its ID",
        "operationId": "deleteEntity",
        "tags": ["Entities"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/inventory/create": {
      "post": {
        "summary": "Create a new inventory",
        "description": "Adds a new inventory",
        "operationId": "createInventory",
        "tags": ["Inventories"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["label"],
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The inventory's label"
                  },
                  "description": {
                    "type": "string",
                    "description": "The inventory's description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/inventory/read": {
      "get": {
        "summary": "Get inventory by ID",
        "description": "Returns an inventory's data by ID",
        "operationId": "getInventory",
        "tags": ["Inventories"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the inventory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                },
                "example": {
                  "id": 12,
                  "label": "Dutch",
                  "description": "Dutch branch office",
                  "created_at": "2025-06-30T06:46:10Z"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
"/inventory/list": {
      "get": {
        "summary": "List inventories",
        "description": "Returns all inventories",
        "operationId": "listInventories",
        "tags": ["Inventories"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of inventories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Inventory" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 12,
                      "label": "Dutch",
                      "description": "Dutch branch office",
                      "created_at": "2025-06-30T06:46:10Z"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List inventories with advanced filtering",
        "description": "Returns all inventories with advanced filtering options",
        "operationId": "listInventoriesAdvanced",
        "tags": ["Inventories"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000,
                    "description": "Maximum number of items to return"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "description": "The index of the first item to return"
                  },
                  "sort": {
                    "type": "string",
                    "description": "Sort expression (e.g., 'label,-created_at')"
                  },
                  "q": {
                    "type": "string",
                    "description": "A search query string"
                  },
                  "conditions": {
                    "type": "array",
                    "description": "Advanced filtering conditions",
                    "items": {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of inventories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Inventory" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 12,
                      "label": "Dutch",
                      "description": "Dutch branch office",
                      "created_at": "2025-06-30T06:46:10Z"
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/inventory/update": {
      "post": {
        "summary": "Update an existing inventory",
        "description": "Updates the information of an existing inventory",
        "operationId": "updateInventory",
        "tags": ["Inventories"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "label"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the inventory"
                  },
                  "label": {
                    "type": "string",
                    "description": "The inventory's label"
                  },
                  "description": {
                    "type": "string",
                    "description": "The inventory's description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/inventory/delete": {
      "post": {
        "summary": "Delete an inventory",
        "description": "Deletes the specified inventory by its ID",
        "operationId": "deleteInventory",
        "tags": ["Inventories"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the inventory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/inventory/item/create": {
      "post": {
        "summary": "Create a new inventory item",
        "description": "Adds an inventory item",
        "operationId": "createInventoryItem",
        "tags": ["Inventory Items"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["inventory_id", "entity_id"],
                "properties": {
                  "inventory_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the inventory"
                  },
                  "entity_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                },
                "example": {
                  "id": 123
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/inventory/item/read": {
      "get": {
        "summary": "Get inventory item by ID",
        "description": "Returns an inventory item's data by ID",
        "operationId": "getInventoryItem",
        "tags": ["Inventory Items"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Unique identifier for the inventory item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory item details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItem"
                },
                "example": {
                  "id": 123,
                  "inventory_id": 12,
                  "entity_id": 234
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/inventory/item/list": {
      "get": {
        "summary": "List inventory items",
        "description": "Returns all inventory items",
        "operationId": "listInventoryItems",
        "tags": ["Inventory Items"],
        "parameters": [
          { "$ref": "#/components/parameters/SearchQuery" },
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/SortParam" }
        ],
        "responses": {
          "200": {
            "description": "List of inventory items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/InventoryItem" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "inventory_id": 12,
                      "entity_id": 234
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      },
      "post": {
        "summary": "List inventory items with advanced filtering",
        "description": "Returns all inventory items with advanced filtering options",
        "operationId": "listInventoryItemsAdvanced",
        "tags": ["Inventory Items"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 1000,
                    "description": "Maximum number of items to return"
                  },
                  "offset": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0,
                    "description": "The index of the first item to return"
                  },
                  "sort": {
                    "type": "string",
                    "description": "Sort expression"
                  },
                  "q": {
                    "type": "string",
                    "description": "A search query string"
                  },
                  "conditions": {
                    "type": "array",
                    "description": "Advanced filtering conditions",
                    "items": {
                      "$ref": "#/components/schemas/FilterCondition"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of inventory items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["data", "has_more"],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/InventoryItem" }
                    },
                    "has_more": { "type": "boolean" }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 123,
                      "inventory_id": 12,
                      "entity_id": 234
                    }
                  ],
                  "has_more": false
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        },
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "/inventory/item/update": {
      "post": {
        "summary": "Update an existing inventory item",
        "description": "Updates the information of an existing inventory item",
        "operationId": "updateInventoryItem",
        "tags": ["Inventory Items"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id", "inventory_id", "entity_id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the inventory item"
                  },
                  "inventory_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the inventory"
                  },
                  "entity_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the entity"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    },
    "/inventory/item/delete": {
      "post": {
        "summary": "Delete an inventory item",
        "description": "Deletes the specified inventory item by its ID",
        "operationId": "deleteInventoryItem",
        "tags": ["Inventory Items"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Unique identifier for the inventory item"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "$ref": "#/components/responses/NoContent" },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "404": { "$ref": "#/components/responses/NotFound" }
        },
        "security": [
          {
            "OAuth2": ["write"]
          }
        ]
      }
    }
  }
}
